{
  "React Native Class Component": {
    "prefix": "rncc",
    "body": [
      "import React from 'react'",
      "import { View, Text, StyleSheet } from 'react-native'\n",
      "interface Props {}\n",
      "export default class $TM_FILENAME_BASE extends React.Component<Props> {",
      "\tstatic defaultProps = {}\n",
      "\tconstructor(props: Props) {",
      "\t\tsuper(props)",
      "\t}\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View style={styles.container}>",
      "\t\t\t\t<Text style={{ fontSize: 20 }}> $TM_FILENAME_BASE </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}\n",
      "const styles = StyleSheet.create({",
      "\tcontainer: {",
      "\t\talignItems: 'center',",
      "\t\tflex: 1,",
      "\t\tjustifyContent: 'center',",
      "\t},",
      "})"
    ]
  },
  "React Native Class Component Screen": {
    "prefix": "rnccs",
    "body": [
      "import React from 'react'",
      "import { View, Text, StyleSheet } from 'react-native'",
      "import { RouteProp } from '@react-navigation/native'",
      "import { StackNavigationProp } from '@react-navigation/stack'\n",
      "type $TM_FILENAME_BASENavigationProp = StackNavigationProp<${1:RootStackParamList}, '$TM_FILENAME_BASE'>",
      "type $TM_FILENAME_BASERouteProp = RouteProp<RootStackParamList, '$TM_FILENAME_BASE'>",
      "type Props = {",
      "\tnavigation: $TM_FILENAME_BASENavigationProp",
      "\troute: DetailsScreenRouteProp",
      "}\n",
      "export default class $TM_FILENAME_BASE extends React.Component<Props> {",
      "\tconstructor(props: Props) {",
      "\t\tsuper(props)",
      "\t}\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View style={styles.container}>",
      "\t\t\t\t<Text style={{ fontSize: 20 }}> $TM_FILENAME_BASE </Text>",
      "\t\t\t</View>",
      "\t\t)",
      "\t}",
      "}\n",
      "const styles = StyleSheet.create({",
      "\tcontainer: {",
      "\t\talignItems: 'center',",
      "\t\tflex: 1,",
      "\t\tjustifyContent: 'center',",
      "\t},",
      "})"
    ]
  },
  "React Native Function Component": {
    "prefix": "rnfc",
    "body": [
      "import React from 'react'",
      "import { View, Text, StyleSheet } from 'react-native'\n",
      "interface Props {}\n",
      "const $TM_FILENAME_BASE: React.SFC<Props> = props => (",
      "\t<View style={styles.container}>",
      "\t\t<Text style={{ fontSize: 20 }}> $TM_FILENAME_BASE </Text>",
      "\t</View>",
      ")\n",
      "$TM_FILENAME_BASE.defaultProps = {}\n",
      "const styles = StyleSheet.create({",
      "\tcontainer: {",
      "\t\talignItems: 'center',",
      "\t\tflex: 1,",
      "\t\tjustifyContent: 'center',",
      "\t},",
      "})\n",
      "${1:export default $TM_FILENAME_BASE}"
    ]
  },
  "React Native Function Component Screen": {
    "prefix": "rnfcs",
    "body": [
      "import React from 'react'",
      "import { View, Text, StyleSheet } from 'react-native'",
      "import { RouteProp } from '@react-navigation/native'",
      "import { StackNavigationProp } from '@react-navigation/stack'\n",
      "type $TM_FILENAME_BASENavigationProp = StackNavigationProp<${1:RootStackParamList}, '$TM_FILENAME_BASE'>",
      "type $TM_FILENAME_BASERouteProp = RouteProp<RootStackParamList, '$TM_FILENAME_BASE'>",
      "type Props = {",
      "\tnavigation: $TM_FILENAME_BASENavigationProp",
      "\troute: DetailsScreenRouteProp",
      "}\n",
      "const $TM_FILENAME_BASE: : React.SFC<Props> = ({ navigation, route }) => {",
      "\treturn(",
      "\t\t<View style={styles.container}>",
      "\t\t\t<Text style={{ fontSize: 20 }}> $TM_FILENAME_BASE </Text>",
      "\t\t</View>",
      "\t)\n",
      "const styles = StyleSheet.create({",
      "\tcontainer: {",
      "\t\talignItems: 'center',",
      "\t\tflex: 1,",
      "\t\tjustifyContent: 'center',",
      "\t},",
      "})\n",
      "${1:export default $TM_FILENAME_BASE}"
    ]
  },
  "mobxImport": {
    "prefix": "mobx",
    "body": "import { action, computed, observable, runInAction } from 'mobx'"
  },
  "mobxReactImport": {
    "prefix": "mobx-react",
    "body": "import { observer } from 'mobx-react'"
  },
  "mobx observable": {
    "prefix": "observable",
    "body": "@observable $1 = $2"
  },
  "mobx action": {
    "prefix": "action",
    "body": "@action ${1:boundClassMethod} = () => {\n  $2\n}",
    "description": "mobx action"
  },
  "mobx runInAction": {
    "prefix": "runInAction",
    "body": "runInAction(() => {\n  $1\n})",
    "description": "mobx runInAction"
  },
  "mobx computed": {
    "prefix": "computed",
    "body": "@computed get ${1:funcName}() {\n  return $2\n}",
    "description": "mobx computed"
  },
  "React Native ActivityIndicator": {
    "prefix": "rnActivityIndicator",
    "body": "<ActivityIndicator size=\"${1|small,large|}\" color=\"#00ff00\" />",
    "description": "显示一个圆形的 loading 提示符号"
  },
  "React Native Button": {
    "prefix": "rnButton",
    "body": [
      "<Button",
      "\tonPress={()=> alert('Press Button')}",
      "\ttitle=\"${1:Learn More}\"",
      "\tcolor=\"#841584\"",
      "/>"
    ],
    "description": "一个简单的跨平台的按钮组件。可以进行一些简单的定制。"
  },
  "React Native FlatList": {
    "prefix": "rnFlatList",
    "body": [
      "<FlatList",
      "\tdata=[{key: 'a'}, {key: 'b'}]",
      "\trenderItem={(item) => <Text>{item.key}</Text>}",
      "\tkeyExtractor={(item,index) => index.toString()}",
      "\tonRefresh={() => {}}",
      "/>"
    ],
    "description": "高性能的简单列表组件"
  },
  "React Native Image": {
    "prefix": "rnImage",
    "body": "<Image style={{width: 50, height:50}} source={{uri: '${1:https://facebook.github.io/react-native/img/tiny_logo.png}'}} />",
    "description": "用于显示多种不同类型图片的 React 组件，包括网络图片、静态资源、临时的本地图片、以及本地磁盘上的图片（如相册）等"
  },
  "React Native Modal": {
    "prefix": "rnModal",
    "body": [
      "<Modal",
      "\tvisible={false}",
      "\ttransparent",
      "\tonRequestClose={() => {}}",
      ">",
      "\t<Text></Text>",
      "</Modal>"
    ],
    "description": "Modal 组件是一种简单的覆盖在其他视图之上显示内容的方式"
  },
  "React Native ScrollView": {
    "prefix": "rnScrollview",
    "body": [
      "<ScrollView",
      "\tkeyboardShouldPersistTaps=\"handled\" // http://t.cn/EowE3r3",
      "\tautomaticallyAdjustContentInsets={false}",
      "\tshowsHorizontalScrollIndicator={false}",
      "\tshowsVerticalScrollIndicator={false}",
      ">",
      "\t$1",
      "</ScrollView>"
    ],
    "description": "一个包装了平台的ScrollView（滚动视图）的组件，同时还集成了触摸锁定的“响应者”系统。"
  },
  "React Native SectionList": {
    "prefix": "rnSectionList",
    "body": [
      "<SectionList",
      "\trenderItem={({ item, index, section }) => <Text key={index}>{item}</Text>}",
      "\tsections={[",
      "\t{ title: 'Title1', data: ['item1', 'item2'] },",
      "\t{ title: 'Title2', data: ['item3', 'item4'] },",
      "\t{ title: 'Title3', data: ['item5', 'item6'] }",
      "]}",
      "keyExtractor={(item, index) => index.toString()}"
    ],
    "description": "description"
  },
  "StatusBar": {
    "prefix": "rnStatusBar",
    "body": "<StatusBar translucent={false} backgroundColor=\"white\" barStyle=\"dark-content\" />",
    "description": "控制应用状态栏的组件"
  },
  "React Native Text": {
    "prefix": "rnText",
    "body": "<Text>$1</Text>",
    "description": "一个用于显示文本的React组件，并且它也支持嵌套、样式，以及触摸处理"
  },
  "React Native TextInput": {
    "prefix": "rnTextInput",
    "body": [
      "<TextInput",
      "\tstyle={{height: 40, borderColor: 'gray', borderWidth: 1}}",
      "\tonChangeText={(text) => this.setState(text)}",
      "value={this.state.text}",
      "</TextInput>"
    ],
    "description": "TextInput是一个允许用户在应用中通过键盘输入文本的基本组件"
  },
  "React Native TouchableOpacity": {
    "prefix": "rnTouchableOpacity",
    "body": [
      "<TouchableOpacity onPress={() => alert('TouchableOpacity')}",
      "\t<Text>Touch Here</Text>",
      "</TouchableOpacity>"
    ],
    "description": "本组件用于封装视图，使其可以正确响应触摸操作"
  },
  "React Native StyleSheet": {
    "prefix": "rnStyle",
    "body": [
      "const styles = StyleSheet.create({",
      "\t${1:style},",
      "})\n"
    ],
    "description": "StyleSheet 提供了一种类似 CSS 样式表的抽象"
  }
}
